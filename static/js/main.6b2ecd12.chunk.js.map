{"version":3,"sources":["reducers/index.js","components/TrelloCard.js","components/TrelloList.js","components/App.js","reportWebVitals.js","index.js"],"names":["getCurrentDate","date","Date","year","getFullYear","toString","month","getMonth","day","getDate","list","WORK_LIST_ID","WORK_LIST_TITLE","WORK_LIST_ORD","USE_YN","REG_ID","REG_DTIME","MOD_ID","MOD_DTIME","card","CARD_ID","CARD_TITLE","CARD_DESC","CARD_ORD","dataInfo","listLength","length","combineReducers","listReducer","state","action","type","copy","push","payload","console","log","forEach","element","temp","index","copiedTitle","copiedOrd","cardReducer","updateCardItem","infoReducer","styles","marginTop","marginBottom","whiteSpace","BootstrapDialog","styled","Dialog","theme","padding","spacing","BootstrapDialogTitle","props","children","onClose","other","DialogTitle","sx","m","p","IconButton","aria-label","onClick","position","right","top","color","palette","grey","TrelloCard","useState","icon","iconUpdate","cardInfo","cardTitle","cardTitleUpdate","cardTitleOpen","cardTitleOpenUpdate","dispatch","useDispatch","onClickSave","React","open","setOpen","handleClickOpen","handleClose","draggableId","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","style","onMouseEnter","onMouseLeave","Typography","gutterBottom","display","float","className","onChange","e","target","value","autoFocus","onFocus","currentTarget","select","aria-labelledby","fullWidth","maxWidth","id","DialogContent","dividers","DialogActions","container","backgroundColor","borderRadius","width","margin","verticalAlign","cursor","clear","menuIcon","opacity","containerHeader","popupContainer","zIndex","height","popupHeader","textAlign","borderBottom","popupBody","selectBox","TrelloList","useSelector","addCardOpen","addCardOpenUpdate","addCardTitle","addCardTitleUpdate","listTitleOpen","listTitleOpenUpdate","listTitle","listTitleUpdate","moveListOpen","moveListOpenUpdate","anchorEl","setAnchorEl","handleClick","event","popoverOpen","Boolean","popoverId","undefined","addInputState","listInfo","useEffect","droppableProps","aria-describedby","variant","Popover","anchorOrigin","vertical","horizontal","setTimeout","map","item","Fragment","Number","document","getElementById","onBlur","placeholder","App","addListOpen","addListOpenUpdate","addListTitle","addListTitleUpdate","window","scrollTo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","rootReducer","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6b2ecd12.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\r\n\r\nconst getCurrentDate = () => {\r\n    const date = new Date();\r\n    const year = date.getFullYear().toString();\r\n\r\n    let month = date.getMonth() + 1;\r\n    month = month < 10 ? '0' + month.toString() : month.toString();\r\n\r\n    let day = date.getDate();\r\n    day = day < 10 ? '0' + day.toString() : day.toString();\r\n\r\n    return year + \"-\" + month + \"-\" + day ;\r\n}\r\n\r\n\r\nlet list = [\r\n    { \r\n        WORK_LIST_ID: 1,\r\n        WORK_LIST_TITLE: \"첫번째 리스트\", \r\n        WORK_LIST_ORD: 1,\r\n        USE_YN: 1,\r\n        REG_ID: \"배찬\",\r\n        REG_DTIME: \"2022-02-04\",\r\n        MOD_ID: \"배찬\",\r\n        MOD_DTIME: \"2022-02-04\"\r\n    },{ \r\n        WORK_LIST_ID: 2,\r\n        WORK_LIST_TITLE: \"두번째 리스트\", \r\n        WORK_LIST_ORD: 1001,\r\n        USE_YN: 1,\r\n        REG_ID: \"배찬2\",\r\n        REG_DTIME: \"2022-02-04\",\r\n        MOD_ID: \"배찬2\",\r\n        MOD_DTIME: \"2022-02-04\"\r\n    },{ \r\n        WORK_LIST_ID: 3,\r\n        WORK_LIST_TITLE: \"세번째 리스트\", \r\n        WORK_LIST_ORD: 2001,\r\n        USE_YN: 1,\r\n        REG_ID: \"배찬3\",\r\n        REG_DTIME: \"2022-03-13\",\r\n        MOD_ID: \"배찬3\",\r\n        MOD_DTIME: \"2022-03-13\"\r\n    },\r\n];\r\n\r\nlet card = [\r\n    {\r\n        CARD_ID: 1,\r\n        WORK_LIST_ID: 1,\r\n        CARD_TITLE: \"첫번째 카드\",\r\n        CARD_DESC: \"첫번째 카드 설명\",\r\n        CARD_ORD: 1,\r\n        USE_YN: 1,\r\n        REG_ID: \"배찬\",\r\n        REG_DTIME: \"2022-02-04\",\r\n        MOD_ID: \"배찬\",\r\n        MOD_DTIME: \"2022-02-04\"\r\n    },{\r\n        CARD_ID: 2,\r\n        WORK_LIST_ID: 2,\r\n        CARD_TITLE: \"두번째 카드\",\r\n        CARD_DESC: \"두번째 카드 설명\",\r\n        CARD_ORD: 1001,\r\n        USE_YN: 1,\r\n        REG_ID: \"배찬\",\r\n        REG_DTIME: \"2022-02-04\",\r\n        MOD_ID: \"배찬\",\r\n        MOD_DTIME: \"2022-02-04\"\r\n    },{\r\n        CARD_ID: 3,\r\n        WORK_LIST_ID: 2,\r\n        CARD_TITLE: \"세번째 카드\",\r\n        CARD_DESC: \"세번째 카드 설명\",\r\n        CARD_ORD: 2001,\r\n        USE_YN: 1,\r\n        REG_ID: \"배찬\",\r\n        REG_DTIME: \"2022-02-05\",\r\n        MOD_ID: \"배찬\",\r\n        MOD_DTIME: \"2022-02-05\"\r\n    },{\r\n        CARD_ID: 4,\r\n        WORK_LIST_ID: 3,\r\n        CARD_TITLE: \"4번째 카드\",\r\n        CARD_DESC: \"4번째 카드 설명\",\r\n        CARD_ORD: 3001,\r\n        USE_YN: 1,\r\n        REG_ID: \"배찬\",\r\n        REG_DTIME: \"2022-03-13\",\r\n        MOD_ID: \"배찬\",\r\n        MOD_DTIME: \"2022-03-13\"\r\n    }\r\n];\r\n\r\n\r\nlet dataInfo = {\r\n    listLength : list.length\r\n};\r\n\r\nfunction listReducer(state = list, action){\r\n    if(action.type === 'addList'){\r\n\r\n        let copy = [...state];\r\n        copy.push({ \r\n            WORK_LIST_ID: copy[copy.length-1].WORK_LIST_ID + 1,     //  이 부분은 ai로 처리해야할듯\r\n            WORK_LIST_TITLE: action.payload, \r\n            WORK_LIST_ORD: copy[copy.length-1].WORK_LIST_ORD + 1000,   //  이 부분은 ai로 처리해야할듯\r\n            USE_YN: 1,\r\n            REG_ID: \"배찬\",\r\n            REG_DTIME: getCurrentDate(),\r\n            MOD_ID: \"배찬\",\r\n            MOD_DTIME: getCurrentDate()\r\n        });\r\n        console.log(copy);\r\n        return copy;\r\n        \r\n    }else if(action.type === 'updateListTitle'){\r\n        \r\n        let copy = [...state];\r\n\r\n        copy.forEach( (element) => {\r\n            if(element.WORK_LIST_ID === action.payload[1]){\r\n                element.WORK_LIST_TITLE = action.payload[0];\r\n                element.MOD_ID = \"배찬\";\r\n                element.MOD_DTIME = getCurrentDate();\r\n            }\r\n        });\r\n        \r\n        console.log(copy);\r\n        return copy;\r\n\r\n    }else if(action.type === 'copyList'){\r\n        \r\n        let copy = [...state];\r\n        let copiedTitle = \"\";\r\n        let copiedOrd = 0;\r\n\r\n\r\n        copy.forEach((element,index) => {\r\n\r\n            if(element.WORK_LIST_ID  === action.payload){\r\n                copiedTitle = element.WORK_LIST_TITLE;\r\n                copiedOrd = index+2;\r\n            }\r\n        });\r\n        \r\n        copy.push({ \r\n            WORK_LIST_ID: copy[copy.length-1].WORK_LIST_ID + 1,\r\n            WORK_LIST_TITLE: copiedTitle,\r\n            WORK_LIST_ORD: copiedOrd,\r\n            USE_YN: 1,\r\n            REG_ID: \"배찬\",\r\n            REG_DTIME: getCurrentDate(),\r\n            MOD_ID: \"배찬\",\r\n            MOD_DTIME: getCurrentDate()\r\n        });\r\n\r\n    }else if(action.type === 'moveList'){\r\n        let copy = [...state];\r\n        let temp = \"\";\r\n\r\n        console.log(\"기본값 :\" + action.payload[0]);\r\n        console.log(\"변경값 :\" + action.payload[1]);\r\n\r\n        copy.forEach((element,index) => {\r\n            console.log(index);\r\n\r\n            if(copy[index].WORK_LIST_ORD === action.payload[0]){\r\n                copy[index].WORK_LIST_ORD = action.payload[1];\r\n                console.log(\"변경전\");\r\n                console.log(copy[index]);\r\n            }else if(copy[index].WORK_LIST_ORD === action.payload[1]){\r\n                copy[index].WORK_LIST_ORD = action.payload[0];\r\n                console.log(\"변경후\");\r\n                console.log(copy[index]);\r\n            }\r\n        });\r\n\r\n        temp = copy[action.payload[0]-1];\r\n        copy[action.payload[0]-1] = copy[action.payload[1]-1];\r\n        copy[action.payload[1]-1] = temp;\r\n\r\n        return copy;\r\n    }else{\r\n        return state;\r\n    }\r\n    \r\n}\r\n\r\nfunction cardReducer(state = card, action){\r\n    if(action.type === 'addCard'){\r\n\r\n        let copy = [...state];\r\n        copy.push({\r\n            CARD_ID: copy[copy.length-1].CARD_ID + 1,\r\n            WORK_LIST_ID: action.payload[1],\r\n            CARD_TITLE: action.payload[0],\r\n            CARD_DESC: \"추가된 카드 설명\",\r\n            CARD_ORD: copy[copy.length-1].CARD_ORD + 1,\r\n            USE_YN: 1,\r\n            REG_ID: \"배찬\",\r\n            REG_DTIME: getCurrentDate(),\r\n            MOD_ID: \"배찬\",\r\n            MOD_DTIME: getCurrentDate()\r\n        });\r\n\r\n        console.log(copyr\n        return copy;\r\n\r\n    }else if(action.type === 'updateCardTitle'){\r\n        \r\n        let copy = [...state];\r\n\r\n        let updateCardItem = copy[action.payload[1]-1];\r\n\r\n        updateCardItem.CARD_TITLE = action.payload[0];\r\n        updateCardItem.MOD_ID = \"배찬\";\r\n        updateCardItem.MOD_DTIME = getCurrentDate();\r\n        \r\n        console.log(copy);\r\n        return copy;\r\n\r\n    }else{\r\n        return state;\r\n    }\r\n}\r\n\r\nfunction infoReducer(state = dataInfo, action){\r\n    return state;\r\n}\r\n\r\n\r\nexport default combineReducers({listReducer,cardReducer,infoReducer});","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { styled } from '@mui/material/styles';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst TrelloCard = (props) => {\r\n\r\n    let [icon,iconUpdate] = useState(false);\r\n\r\n    let [cardTitle,cardTitleUpdate] = useState(props.cardInfo.CARD_TITLE);\r\n    let [cardTitleOpen,cardTitleOpenUpdate] = useState(false);\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const onClickSave = () => {\r\n        \r\n        cardTitleOpenUpdate(false);\r\n\r\n        if(cardTitle !== props.cardInfo.CARD_TITLE){\r\n            console.log(\"카드 타이틀 수정 dispatch 발생\");\r\n            dispatch({type: \"updateCardTitle\", payload: [cardTitle,props.cardInfo.CARD_ID]});\r\n        }\r\n    }\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    \r\n    return(\r\n        <>\r\n            <Draggable draggableId={String(props.cardInfo.CARD_ID)} index={props.index}>\r\n                {(provided) => \r\n                    <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                    {\r\n                        cardTitleOpen === false\r\n                        ? <Card style={styles.card} onMouseEnter={ () => iconUpdate(true) } \r\n                                onMouseLeave={ () => iconUpdate(false)} \r\n                                onClick={handleClickOpen} >\r\n                            <Typography gutterBottom style={{display:\"inline\"}}>\r\n                                {cardTitle}\r\n                            </Typography>\r\n                            { icon === true && <EditIcon style={{float:\"right\", color:\"#bbb\"}} onClick={()=>cardTitleOpenUpdate(true)}></EditIcon> }\r\n                        </Card>\r\n                        : <div className=\"add_card_input\">\r\n                            <textarea onChange={ (e) => {cardTitleUpdate(e.target.value)} }value={cardTitle} \r\n                            autoFocus \r\n                            onFocus={(e) => e.currentTarget.select()} />\r\n                            <button onClick={ onClickSave }>Save</button>\r\n                            <button onClick={ () => {cardTitleOpenUpdate(false); cardTitleUpdate(props.cardInfo.CARD_TITLE)}}>Close</button>\r\n                        </div>\r\n                    }\r\n                    </div>\r\n                }\r\n            \r\n            </Draggable>\r\n            <BootstrapDialog\r\n                onClose={handleClose}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth={true}\r\n                maxWidth={'md'}\r\n            >\r\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                    {cardTitle}\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <Typography gutterBottom >\r\n                    Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n\r\nPraesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\r\n\r\nAenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogContent dividers>\r\n                    <Typography gutterBottom>\r\n                        Activity\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n        </>\r\n    )\r\n}\r\n\r\nconst styles= {\r\n    card: {\r\n        marginTop: '8px',\r\n        marginBottom: '8px',\r\n        whiteSpace: 'normal'        // card 줄바꿈 처리\r\n    }\r\n}\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n      padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n      padding: theme.spacing(1),\r\n    },\r\n  }));\r\n\r\n  const BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props;\r\n  \r\n    return (\r\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n        {children}\r\n        {onClose ? (\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            onClick={onClose}\r\n            sx={{\r\n              position: 'absolute',\r\n              right: 8,\r\n              top: 8,\r\n              color: (theme) => theme.palette.grey[500],\r\n            }}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </DialogTitle>\r\n    );\r\n  };  \r\n\r\n  BootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n  };\r\nexport default TrelloCard;","import React, {  useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport TrelloCard from \"./TrelloCard\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { Popover } from '@material-ui/core';\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\n\r\nconst TrelloList = (props) =>{\r\n\r\n    const listReducer = useSelector( (state) => state.listReducer);\r\n    const cardReducer = useSelector( (state) => state.cardReducer);\r\n\r\n    let [addCardOpen,addCardOpenUpdate] = useState(false);\r\n    let [addCardTitle,addCardTitleUpdate] = useState('');\r\n    \r\n    let [listTitleOpen,listTitleOpenUpdate] = useState(false);\r\n    let [listTitle,listTitleUpdate] = useState(listReducer[props.index].WORK_LIST_TITLE);\r\n\r\n    let [moveListOpen,moveListOpenUpdate] = useState(false);\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    \r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const popoverOpen = Boolean(anchorEl);\r\n    const popoverId = popoverOpen ? 'simple-popover' : undefined;\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const addInputState = (type) => {   // onBlur처리 되었을 때 실행\r\n        \r\n        if(type === \"list\"){\r\n            listTitleOpenUpdate(false); // list 제목 update창 닫기\r\n\r\n            if(listTitle !== props.listInfo.WORK_LIST_TITLE){      // 만약 list 제목이 변경된 상태로 blur되었다면 dispatch 처리해주기\r\n                console.log(\"list dispatch 발생\");\r\n                dispatch({type:\"updateListTitle\", payload: [listTitle,listReducer[props.index].WORK_LIST_ID]});\r\n            }\r\n        }else if(type === \"card\"){\r\n            if(addCardTitle === \"\"){\r\n                return false;\r\n            }\r\n            addCardOpenUpdate(false);\r\n            \r\n            console.log(\"card dispatch 발생\");\r\n            dispatch({type:'addCard', payload: [addCardTitle,props.listInfo.WORK_LIST_ID]});\r\n            \r\n        }\r\n    };\r\n\r\n    const copyList = () => {\r\n        dispatch({type:\"copyList\", payload: [props.listInfo.WORK_LIST_ID]});\r\n    }\r\n\r\n    const moveList = () =>{\r\n        dispatch({type:\"moveList\", payload: [props.index+1, Number(document.getElementById(\"selectPosition\").value)]});\r\n    }\r\n\r\n\r\n    useEffect( () => {\r\n        listTitleUpdate(listReducer[props.index].WORK_LIST_TITLE);\r\n    }, [listReducer]);\r\n\r\n    return(\r\n        <Droppable draggableId={String(props.listInfo.WORK_LIST_ID)}>\r\n            { (provided) => (\r\n                <div style={styles.container} {...provided.droppableProps} ref={provided.innerRef}>\r\n                {\r\n                    listTitleOpen === false\r\n                    ? <div>\r\n                        <div style={styles.containerHeader} onClick={ () => listTitleOpenUpdate(true) }>\r\n                            <b>{listReducer[props.index].WORK_LIST_TITLE}</b>\r\n                        </div>\r\n                        <MenuIcon className=\"menuIcon\" style={styles.menuIcon}\r\n                            aria-describedby={popoverId} variant=\"contained\" onClick={handleClick} />\r\n                        <Popover\r\n                            id={popoverId}\r\n                            open={popoverOpen}\r\n                            anchorEl={anchorEl}\r\n                            onClose={handleClose}\r\n                            anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'left',\r\n                            }}>\r\n\r\n                            {\r\n                                moveListOpen === false\r\n                                ? <div style={styles.popupContainer}>\r\n                                    <div style={styles.popupHeader}>\r\n                                        List actions\r\n                                        <CloseIcon onClick={handleClose} style={{\"float\":\"right\", \"cursor\":\"pointer\"}}/>\r\n                                    </div>\r\n                                    <div style={styles.popupBody} className=\"popupBody\">\r\n                                        <ul>\r\n                                            <li onClick={ () => { addCardOpenUpdate(true); handleClose();}}>Add card...</li>\r\n                                            <li onClick={ (e) => { copyList(e); handleClose();}}>Copy list...</li>\r\n                                            <li onClick={ () => { moveListOpenUpdate(true) }}>Move list...</li>\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                                : <div style={styles.popupContainer}>\r\n                                    <div style={styles.popupHeader}>\r\n                                        Move list\r\n                                        <CloseIcon onClick={ () => {handleClose(); setTimeout(() => {moveListOpenUpdate(false)},500)}} style={{\"float\":\"right\", \"cursor\":\"pointer\"}}/>\r\n                                    </div>\r\n                                    <div style={styles.popupBody} className=\"popupBody\">\r\n                                        <div style={{\"display\":\"flex\"}}>\r\n                                            <div>Position</div>\r\n                                            <div style={{\"flexGrow\":\"2\"}}></div>\r\n                                            <select id=\"selectPosition\" style={styles.selectBox}>\r\n                                                {\r\n                                                    listReducer.map( (item,index) => {\r\n                                                        return(\r\n                                                            <React.Fragment key={index}>\r\n                                                                <option>{index+1}</option>\r\n                                                            </React.Fragment>\r\n                                                        )\r\n                                                    }) \r\n                                                }\r\n                                            </select>\r\n                                        </div>\r\n                                        <button onClick={ () => {moveList(); handleClose(); setTimeout(() => {moveListOpenUpdate(false)},500)} }>Move</button>\r\n                                    </div>\r\n                                </div>   \r\n                            }\r\n                        </Popover>\r\n                    </div>\r\n                    : <textarea className=\"list_title_textarea\" value={listTitle} \r\n                        onChange={ (e) => listTitleUpdate(e.target.value) }\r\n                        onBlur={ () => addInputState(\"list\") } \r\n                        autoFocus \r\n                        onFocus={(e) => e.currentTarget.select()} />\r\n                }\r\n                \r\n\r\n                <div style={styles.list}>\r\n                    {\r\n                        cardReducer.map( (item,index) => {\r\n                            return(\r\n                                <div key={index}>\r\n                                    {\r\n                                        props.listInfo.WORK_LIST_ID === item.WORK_LIST_ID\r\n                                        ? <TrelloCard cardInfo={item} index={index}/>\r\n                                        : null\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    {\r\n                    addCardOpen === false\r\n                    ? <div className=\"add_card\" onClick={ () => { addCardOpenUpdate(true); }} >+ Add a card</div>\r\n                    : <div className=\"add_card_input\">\r\n                        <textarea onChange={ (e) => addCardTitleUpdate(e.target.value) } placeholder=\"Enter a title for this card…\"></textarea>\r\n                        <button onClick={ () => addInputState(\"card\") } >Add Card</button>\r\n                        <button onClick={ () => {addCardOpenUpdate(false);}}>Close</button>\r\n                    </div>\r\n                    }\r\n                </div>\r\n                {provided.placeholder}\r\n            </div>\r\n            )}\r\n            \r\n        </Droppable>\r\n    )\r\n}\r\n\r\nconst styles= {\r\n    container: {\r\n        backgroundColor: \"#ccc\",\r\n        borderRadius: 3,\r\n        width: 250,\r\n        padding: 8,\r\n        margin: 8,\r\n        display: 'inline-block',\r\n        verticalAlign: 'top',\r\n        cursor: \"pointer\"\r\n    },\r\n    list: {\r\n        marginTop: '8px',\r\n        marginBottom: '8px',\r\n        clear: 'both'\r\n    },\r\n    menuIcon: {\r\n        float:\"right\", \r\n        color:\"#000\",\r\n        opacity: \"0.5\"\r\n    },\r\n    containerHeader: {\r\n        float: 'left',\r\n        width:'85%'\r\n    },\r\n\r\n    popupContainer: {\r\n        zIndex: '1',\r\n        width: '200px',\r\n        height: '300px',\r\n        backgroundColor: '#eee',\r\n        borderRadius: '3px',\r\n        padding: '3px'\r\n    },\r\n    popupHeader: {\r\n        textAlign: 'center',\r\n        borderBottom: '1px solid #ccc',\r\n        padding:'10px'\r\n        \r\n    },\r\n    popupBody: {\r\n        borderBottom: '1px solid #ccc',\r\n        padding:'10px'\r\n    },\r\n    selectBox: {\r\n        width: '85px',\r\n        height:'25px',\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport default TrelloList;","import React, { useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport '../index.css';\r\nimport TrelloList from \"./TrelloList\";\r\nimport {DragDropContext} from \"react-beautiful-dnd\";\r\n\r\nfunction App() {\r\n\r\nconst listReducer = useSelector( (state) => state.listReducer);\r\n\r\nlet [addListOpen,addListOpenUpdate] = useState(false);\r\nlet [addListTitle,addListTitleUpdate] = useState('');\r\n\r\nlet dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"App\" style={{ whiteSpace: \"nowrap\"}}>\r\n      <header>\r\n        \r\n      </header>\r\n      <DragDropContext>\r\n      <div className=\"Contents\">\r\n\r\n          {\r\n            listReducer.map( (item,index) => {\r\n              return(\r\n                    <TrelloList listInfo={listReducer[index]} index={index} key={index}/>\r\n              )\r\n            })\r\n          }\r\n        \r\n\r\n        {\r\n          addListOpen === false\r\n          ? <div className=\"add_list\" onClick={ () => { addListOpenUpdate(true); }} >+ Add another list</div>\r\n          : <div className=\"add_list_input\">\r\n              <input type='text' onChange={ (e) => addListTitleUpdate(e.target.value) } placeholder=\"Enter list title...\"></input>\r\n              <button onClick={ () => {\r\n\r\n                  if(addListTitle === \"\"){\r\n                    return false;\r\n                  } \r\n\r\n                  dispatch({type:'addList', payload: addListTitle});  \r\n\r\n                  addListOpenUpdate(false); \r\n                  addListTitleUpdate('');\r\n\r\n                  setTimeout(() => {\r\n                    window.scrollTo(50000,0);\r\n                  },0)\r\n\r\n              }}>Add list</button>\r\n              <button onClick={ () => {addListOpenUpdate(false); addListTitleUpdate('');}}>Close</button>\r\n            </div>\r\n        }\r\n      </div>\r\n      </DragDropContext>\r\n    </div>\r\n      \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './reducers';\r\n\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}